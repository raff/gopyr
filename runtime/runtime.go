package runtime

import "fmt"
import "strings"
import "unicode"

type Any = interface{}
type Dict = map[string]Any
type List = []Any
type Tuple = []Any

//
// Assert that the condition is true
//
func Assert(cond bool, message string) {
	if !cond {
		panic("AssertionError: " + message)
	}
}

//
// Check that bag contains value
//
func Contains(bag, value interface{}) bool {
	switch c := bag.(type) {
	case Dict:
		if s, ok := value.(string); ok {
			_, ok = c[s]
			return ok
		}

	case List: // or Tuple
		for _, v := range c {
			if v == value {
				return true
			}
		}

	case string:
		if s, ok := value.(string); ok {
			return strings.Contains(c, s)
		}
	}

	return false
}

//
// An error representing a python exception
//
type PyException struct {
	exc interface{}
}

//
// Implement the error interface
//
func (e *PyException) Error() string {
	return fmt.Sprintf("PyException(%v)", e.exc)
}

//
// An error generated by "raise"
//
func RaisedException(exc interface{}) PyException {
	return PyException{exc: exc}
}

//
// The string contains only whitespace characters
//
func IsSpace(s string) bool {
	for _, r := range s {
		if !unicode.IsSpace(r) {
			return false
		}
	}

	return len(s) > 0
}

//
// The string contains only alphabetic characters
//
func IsAlpha(s string) bool {
	for _, r := range s {
		if !unicode.IsLetter(r) {
			return false
		}
	}

	return len(s) > 0
}

//
// The string contains only numeric characters
//
func IsDigit(s string) bool {
	for _, r := range s {
		if !unicode.IsNumber(r) {
			return false
		}
	}

	return len(s) > 0
}

//
// The string contains only uppercase characters
//
func IsUpper(s string) bool {
	isupper := false

	for _, r := range s {
		if unicode.IsUpper(r) {
			isupper = true
		} else if !unicode.IsSpace(r) {
			return false
		}
	}

	return isupper
}

//
// The string contains only lowercase characters
//
func IsLower(s string) bool {
	islower := false

	for _, r := range s {
		if unicode.IsLower(r) {
			islower = true
		} else if !unicode.IsSpace(r) {
			return false
		}
	}

	return islower
}
